#BlueJ class context
comment0.target=City
comment1.params=name
comment1.target=City(java.lang.String)
comment10.params=other
comment10.target=boolean\ equals(City)
comment2.params=r
comment2.target=void\ addRoad(Road)
comment2.text=\r\n\ Adds\ a\ road\ to\ the\ city's\ list\ of\ roads\r\n\ \r\n\ @param\ r\ road\ to\ add\ to\ ArrayList\r\n
comment3.params=
comment3.target=java.util.ArrayList\ getRoadList()
comment3.text=\r\n\ Get\ a\ reference\ to\ a\ city's\ list\ of\ roads.\ This\ list\ contains\r\n\ all\ roads\ that\ can\ be\ sued\ to\ travel\ into\ or\ out\ of\ the\ city.\r\n\ \r\n\ @return\ ArrayList\ containing\ all\ roads\ to/from\ the\ city\r\n
comment4.params=newDist
comment4.target=void\ setDistanceFromInitial(int)
comment4.text=\r\n\ Mutator\ method\ to\ set\ the\ distance\ from\ the\ "inital\ city,"\ which\r\n\ is\ the\ main\ value\ calcualted\ and\ updated\ while\ running\r\n\ Dijkstra's\ algorithm.\r\n\ \r\n\ @param\ newDist\ Updated\ value\ of\ the\ distance\ from\ the\ initial\ city\r\n
comment5.params=
comment5.target=int\ getDistanceFromInitial()
comment5.text=\r\n\ Accesoor\ method\ to\ get\ the\ distance\ from\ the\ "inital\ city,"\ which\r\n\ is\ the\ main\ value\ calcualted\ and\ updated\ while\ running\r\n\ Dijkstra's\ algorithm.\r\n\ \r\n\ @param\ newDist\ Updated\ value\ of\ the\ distance\ from\ the\ initial\ city\r\n
comment6.params=
comment6.target=boolean\ hasBeenVisited()
comment6.text=\r\n\ Identifies\ whether\ or\ not\ the\ city\ has\ been\ visited\ \r\n\ as\ part\ of\ Dijkstra's\ Algorithm\r\n\ \r\n\ @return\ true\ if\ the\ city\ has\ been\ visited,\ false\ otherwise\r\n
comment7.params=
comment7.target=void\ markAsVisited()
comment7.text=\r\n\ Mark\ that\ the\ city\ has\ been\ visited\ as\ part\ of\ Dijkstra's\ \r\n\ Algorithm\r\n\ \r\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment9.params=
comment9.target=java.lang.String\ getName()
numComments=11
